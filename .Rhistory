library(askpass)
library(usethis)
use_git()
use_github()
usethis::use_git_remote("origin", url = NULL, overwrite = TRUE)
use_github()
pacman::p_load(tidyverse,tiylog, shiny, flextable, magrittr,tmap,sf)
gh_adm2<-read_sf("data/gha_admin_shp/gha_admbnda_adm2_gss_20210308.shp")
tmap_mode("view")
tm_shape(gh_adm2)+tm_polygons()+tm_fill("ADM1_EN")
View(gh_adm2)
tm_shape(gh_adm2)+tm_polygons()+tm_fill()
wflow_build()
install.packages("workflowr")
install.packages("usethis")
library(workflowr)
wflow_git_config(ktemadarko,k.temadarko@gmail.com)
wflow_git_config(user.name=ktemadarko,user.email=k.temadarko@gmail.com)
wflow_git_config(user.name="ktemadarko",user.email="k.temadarko@gmail.com")
wflow_build()
wflow_publish("analysis/*Rmd")
install.packages("pacman")
wflow_publish("analysis/*Rmd")
wflow_publish("analysis/*Rmd")
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse,tiylog, shiny, flextable,geocompkg, spData, spDataLarge, terra,tmap,sf, magrittr)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: packages
pacman::p_load(tidyverse,tidylog, shiny, flextable,geocompkg, spData, spDataLarge, terra,tmap,sf, magrittr)
# Chunk 3: load_data
edu_facilities<-st_read("data/hotosm_gha_education_facilities_gpkg/hotosm_gha_education_facilities.gpkg")
#check what packages are loaded
gdalUtils::ogrinfo("data/hotosm_gha_education_facilities_gpkg/hotosm_gha_education_facilities.gpkg") |>
cat(sep="\n")
# Chunk 4
names(edu_facilities)
# Chunk 5: check_na
#check names that are NA
summary(is.na(edu_facilities$name))
#check amenity that are NA
summary(is.na(edu_facilities$amenity))
# Chunk 6: amenity
#change to title case
edu_facilities$amenity<-str_to_title(edu_facilities$amenity)
edu_facilities$amenity<-if_else((str_detect(edu_facilities$name,
"Basic|Preparatory|Primary")),"Primary",edu_facilities$amenity)
#summary(edu_facilities$amenity)
# Chunk 7: create_df_without_NA_in_name_or_amentity
edu_new<-edu_facilities |>
mutate(across(c(amenity),factor))|>
filter(!is.na(name),
!is.na(amenity))
#drop unused levels
edu_new%<>%
mutate(across(c(amenity),droplevels))
#summary(is.na(edu_new$name))
#summary(is.na(edu_new$amenity))
# Chunk 8: categories_amenity
summary(edu_new$amenity)
#changing name of amenity level "school" to Primary 1-Secondary 12
#levels(edu_name_not_null$amenity)<- c("College","")
# Chunk 10: eruptions
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
# Chunk 11: tabsets
shinyAppDir(
system.file("examples/06_tabsets", package = "shiny"),
options = list(
width = "100%", height = 550
)
)
wflow_publish("analysis/*Rmd")
wflow_status()
wflow_git_push()
